import { PublicKey } from '@solana/web3.js';
import BN from 'bn.js';
import { AmmV3PoolInfo, AmmV3PoolRewardInfo, AmmV3PoolRewardLayoutInfo } from '../ammV3';
import { TickArray } from './tick';
export declare class PoolUtils {
    static getOutputAmountAndRemainAccounts(poolInfo: AmmV3PoolInfo, tickArrayCache: {
        [key: string]: TickArray;
    }, inputTokenMint: PublicKey, inputAmount: BN, sqrtPriceLimitX64?: BN): {
        expectedAmountOut: BN;
        remainingAccounts: PublicKey[];
        executionPrice: BN;
        feeAmount: BN;
    };
    static getInputAmountAndRemainAccounts(poolInfo: AmmV3PoolInfo, tickArrayCache: {
        [key: string]: TickArray;
    }, outputTokenMint: PublicKey, outputAmount: BN, sqrtPriceLimitX64?: BN): {
        expectedAmountIn: BN;
        remainingAccounts: PublicKey[];
        executionPrice: BN;
        feeAmount: BN;
    };
    static getFirstInitializedTickArray(poolInfo: AmmV3PoolInfo, zeroForOne: boolean): {
        isExist: true;
        startIndex: number;
        nextAccountMeta: PublicKey;
    } | {
        isExist: false;
        startIndex: undefined;
        nextAccountMeta: undefined;
    };
    static preInitializedTickArrayStartIndex(poolInfo: AmmV3PoolInfo, zeroForOne: boolean): {
        isExist: boolean;
        nextStartIndex: number;
    };
    static nextInitializedTickArrayStartIndex(poolInfo: AmmV3PoolInfo, zeroForOne: boolean): {
        isExist: boolean;
        nextStartIndex: number;
    };
    static updatePoolRewardInfos({ chainTime, poolLiquidity, rewardInfos }: {
        chainTime: number;
        poolLiquidity: BN;
        rewardInfos: AmmV3PoolRewardLayoutInfo[];
    }): AmmV3PoolRewardInfo[];
}
