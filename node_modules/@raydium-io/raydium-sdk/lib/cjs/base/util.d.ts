/// <reference types="bn.js" />
import { Connection, PublicKey, Transaction, VersionedTransaction } from "@solana/web3.js";
import { TokenAccount } from "./base";
import { InnerTransaction, TxVersion } from "./type";
export declare function getWSOLAmount({ tokenAccounts }: {
    tokenAccounts: TokenAccount[];
}): import("bn.js");
export declare function unwarpSol({ ownerInfo, tokenAccounts }: {
    ownerInfo: {
        wallet: PublicKey;
        payer: PublicKey;
    };
    tokenAccounts: TokenAccount[];
}): {
    address: {};
    innerTransactions: {
        instructions: import("@solana/web3.js").TransactionInstruction[];
        signers: (import("@solana/web3.js").Signer | import("@solana/web3.js").Keypair)[];
        lookupTableAddress: any[];
        instructionTypes: any[];
        supportedVersion: TxVersion[];
    }[];
};
export declare function buildTransaction({ connection, txType, payer, innerTransactions, recentBlockhash }: {
    txType: TxVersion.V0;
    payer: PublicKey;
    connection: Connection;
    innerTransactions: InnerTransaction[];
    recentBlockhash?: string | undefined;
}): Promise<VersionedTransaction[]>;
export declare function buildTransaction({ connection, txType, payer, innerTransactions, recentBlockhash }: {
    txType: TxVersion.LEGACY;
    payer: PublicKey;
    connection: Connection;
    innerTransactions: InnerTransaction[];
    recentBlockhash?: string | undefined;
}): Promise<Transaction[]>;
export declare function buildTransaction({ connection, txType, payer, innerTransactions, recentBlockhash }: {
    txType: TxVersion;
    payer: PublicKey;
    connection: Connection;
    innerTransactions: InnerTransaction[];
    recentBlockhash?: string | undefined;
}): Promise<VersionedTransaction[] | Transaction[]>;
