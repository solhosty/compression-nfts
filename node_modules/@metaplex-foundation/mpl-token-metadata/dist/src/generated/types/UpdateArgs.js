"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateArgsBeet = exports.isUpdateArgsV1 = void 0;
const beet = __importStar(require("@metaplex-foundation/beet"));
const beetSolana = __importStar(require("@metaplex-foundation/beet-solana"));
const Data_1 = require("./Data");
const CollectionToggle_1 = require("./CollectionToggle");
const CollectionDetailsToggle_1 = require("./CollectionDetailsToggle");
const UsesToggle_1 = require("./UsesToggle");
const RuleSetToggle_1 = require("./RuleSetToggle");
const AuthorizationData_1 = require("./AuthorizationData");
const isUpdateArgsV1 = (x) => x.__kind === 'V1';
exports.isUpdateArgsV1 = isUpdateArgsV1;
exports.updateArgsBeet = beet.dataEnum([
    [
        'V1',
        new beet.FixableBeetArgsStruct([
            ['newUpdateAuthority', beet.coption(beetSolana.publicKey)],
            ['data', beet.coption(Data_1.dataBeet)],
            ['primarySaleHappened', beet.coption(beet.bool)],
            ['isMutable', beet.coption(beet.bool)],
            ['collection', CollectionToggle_1.collectionToggleBeet],
            ['collectionDetails', CollectionDetailsToggle_1.collectionDetailsToggleBeet],
            ['uses', UsesToggle_1.usesToggleBeet],
            ['ruleSet', RuleSetToggle_1.ruleSetToggleBeet],
            ['authorizationData', beet.coption(AuthorizationData_1.authorizationDataBeet)],
        ], 'UpdateArgsRecord["V1"]'),
    ],
]);
//# sourceMappingURL=UpdateArgs.js.map