import * as web3 from '@solana/web3.js';
import * as beet from '@metaplex-foundation/beet';
import { Data } from './Data';
import { CollectionToggle } from './CollectionToggle';
import { CollectionDetailsToggle } from './CollectionDetailsToggle';
import { UsesToggle } from './UsesToggle';
import { RuleSetToggle } from './RuleSetToggle';
import { AuthorizationData } from './AuthorizationData';
export type UpdateArgsRecord = {
    V1: {
        newUpdateAuthority: beet.COption<web3.PublicKey>;
        data: beet.COption<Data>;
        primarySaleHappened: beet.COption<boolean>;
        isMutable: beet.COption<boolean>;
        collection: CollectionToggle;
        collectionDetails: CollectionDetailsToggle;
        uses: UsesToggle;
        ruleSet: RuleSetToggle;
        authorizationData: beet.COption<AuthorizationData>;
    };
};
export type UpdateArgs = beet.DataEnumKeyAsKind<UpdateArgsRecord>;
export declare const isUpdateArgsV1: (x: UpdateArgs) => x is {
    __kind: "V1";
} & Omit<{
    newUpdateAuthority: beet.COption<web3.PublicKey>;
    data: beet.COption<Data>;
    primarySaleHappened: beet.COption<boolean>;
    isMutable: beet.COption<boolean>;
    collection: CollectionToggle;
    collectionDetails: CollectionDetailsToggle;
    uses: UsesToggle;
    ruleSet: RuleSetToggle;
    authorizationData: beet.COption<AuthorizationData>;
}, "void"> & {
    __kind: 'V1';
};
export declare const updateArgsBeet: beet.FixableBeet<{
    __kind: "V1";
} & Omit<{
    newUpdateAuthority: beet.COption<web3.PublicKey>;
    data: beet.COption<Data>;
    primarySaleHappened: beet.COption<boolean>;
    isMutable: beet.COption<boolean>;
    collection: CollectionToggle;
    collectionDetails: CollectionDetailsToggle;
    uses: UsesToggle;
    ruleSet: RuleSetToggle;
    authorizationData: beet.COption<AuthorizationData>;
}, "void">, {
    __kind: "V1";
} & Omit<{
    newUpdateAuthority: beet.COption<web3.PublicKey>;
    data: beet.COption<Data>;
    primarySaleHappened: beet.COption<boolean>;
    isMutable: beet.COption<boolean>;
    collection: CollectionToggle;
    collectionDetails: CollectionDetailsToggle;
    uses: UsesToggle;
    ruleSet: RuleSetToggle;
    authorizationData: beet.COption<AuthorizationData>;
}, "void">>;
