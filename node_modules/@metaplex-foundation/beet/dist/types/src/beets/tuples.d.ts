import { FixableBeet, FixedSizeBeet, SupportedTypeDefinition } from '../types';
/**
 * De/Serializes a tuple with all fixed size tuple elements .
 * Since each tuple element can be of a different type not much type safety can
 * be provided here.
 *
 * @param elements the De/Serializer for each tuple element type
 *
 * @category beet/composite
 */
export declare function fixedSizeTuple<T extends any[]>(elements: FixedSizeBeet<any>[]): FixedSizeBeet<any>;
/**
 * De/Serializes a tuple which contains some non-fixed size tuple elements.
 *
 * Since each tuple element can be of a different type not much type safety can
 * be provided here.
 *
 * @param elements the De/Serializer for each tuple element type
 * @category beet/composite
 */
export declare function tuple<T extends any[]>(elements: (FixedSizeBeet<any, any> | FixableBeet<any, any>)[]): FixableBeet<T>;
/**
 * @category TypeDefinition
 */
export declare type TuplesExports = keyof Omit<typeof import('./tuples'), 'tuplesTypeMap'>;
/**
 * @category TypeDefinition
 */
export declare type TuplesTypeMapKey = 'FixedSizeTuple' | 'Tuple';
/**
 * @category TypeDefinition
 */
export declare type TuplesTypeMap = Record<TuplesTypeMapKey, SupportedTypeDefinition & {
    beet: TuplesExports;
}>;
/**
 * Maps tuples beet exports to metadata which describes in which package it
 * is defined as well as which TypeScript type is used to represent the
 * deserialized value in JavaScript.
 *
 * @category TypeDefinition
 */
export declare const tuplesTypeMap: TuplesTypeMap;
