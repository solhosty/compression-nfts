import { Beet, FixableBeet, SupportedTypeDefinition } from '../types';
/**
 * De/Serializes a set with a specific number of keys of type {@link K}
 *
 * @template K type of key elements held in the set
 *
 * @param keyElement the _fixable_ or _fixed_ de/serializers for the key element types
 *
 * @category beet/composite
 */
export declare function set<K>(keyElement: Beet<K, K>): FixableBeet<Set<K>, Set<K>>;
/**
 * @category TypeDefinition
 */
export declare type SetsExports = keyof Omit<typeof import('./sets'), 'setsTypeSet'>;
/**
 * @category TypeDefinition
 */
export declare type SetsTypeMapKey = 'Set';
/**
 * @category TypeDefinition
 */
export declare type SetsTypeMap = Record<SetsTypeMapKey, SupportedTypeDefinition & {
    beet: SetsExports;
}>;
/**
 * Sets sets beet exports to metadata which describes in which package it
 * is defined as well as which TypeScript type is used to represent the
 * deserialized value in JavaScript.
 *
 * @category TypeDefinition
 */
export declare const setsTypeMap: SetsTypeMap;
