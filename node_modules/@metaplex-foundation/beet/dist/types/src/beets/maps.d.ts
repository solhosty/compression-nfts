import { Beet, FixableBeet, SupportedTypeDefinition } from '../types';
/**
 * De/Serializes a map with a specific number of key/values of type {@link K}
 * and {@link V} respectively.
 *
 * @template K type of key elements held in the map
 * @template V type of value elements held in the map
 *
 * @param keyElement the _fixable_ or _fixed_ de/serializers for the key element types
 * @param valElement the _fixable_ or _fixed_ de/serializers for the value element types
 *
 * @category beet/composite
 */
export declare function map<K, V>(keyElement: Beet<K, K>, valElement: Beet<V, V>): FixableBeet<Map<K, V>, Map<K, V>>;
/**
 * @category TypeDefinition
 */
export declare type MapsExports = keyof Omit<typeof import('./maps'), 'mapsTypeMap'>;
/**
 * @category TypeDefinition
 */
export declare type MapsTypeMapKey = 'Map';
/**
 * @category TypeDefinition
 */
export declare type MapsTypeMap = Record<MapsTypeMapKey, SupportedTypeDefinition & {
    beet: MapsExports;
}>;
/**
 * Maps maps beet exports to metadata which describes in which package it
 * is defined as well as which TypeScript type is used to represent the
 * deserialized value in JavaScript.
 *
 * @category TypeDefinition
 */
export declare const mapsTypeMap: MapsTypeMap;
