"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.tuplesTypeMap = exports.tuple = exports.fixedSizeTuple = void 0;
const types_1 = require("../types");
const assert_1 = require("assert");
const beet_fixable_1 = require("../beet.fixable");
// Tuples are a special kind of composite which can be understood as
// fixed length arrays where each tuple element can have a different data type.
// Since the Tuple type itself dictates the length, and buffer layout, no extra
// information is included in the serialized data.
/**
 * De/Serializes a tuple with all fixed size tuple elements .
 * Since each tuple element can be of a different type not much type safety can
 * be provided here.
 *
 * @param elements the De/Serializer for each tuple element type
 *
 * @category beet/composite
 */
function fixedSizeTuple(elements) {
    const len = elements.length;
    const elDescs = elements.map((x) => x.description);
    const byteSizes = elements.map((x) => x.byteSize);
    const byteSize = byteSizes.reduce((acc, x) => acc + x, 0);
    return {
        write: function (buf, offset, value) {
            assert_1.strict.equal(value.length, len, `tuple value element size ${value.length} should match len ${len}`);
            let cursor = offset;
            for (let i = 0; i < len; i++) {
                const v = value[i];
                const beetEl = elements[i];
                beetEl.write(buf, cursor, v);
                cursor += beetEl.byteSize;
            }
        },
        read: function (buf, offset) {
            const els = [];
            let cursor = offset;
            for (let i = 0; i < len; i++) {
                const elBeet = elements[i];
                els[i] = elBeet.read(buf, cursor);
                cursor += elBeet.byteSize;
            }
            return els;
        },
        byteSize,
        length: len,
        description: `FixedSizeTuple<${elDescs.join(',')}>[ ${byteSizes.join(', ')} ]`,
    };
}
exports.fixedSizeTuple = fixedSizeTuple;
/**
 * De/Serializes a tuple which contains some non-fixed size tuple elements.
 *
 * Since each tuple element can be of a different type not much type safety can
 * be provided here.
 *
 * @param elements the De/Serializer for each tuple element type
 * @category beet/composite
 */
function tuple(elements) {
    const len = elements.length;
    const elDescs = elements.map((x) => x.description);
    return {
        toFixedFromData(buf, offset) {
            let cursor = offset;
            const fixedElements = new Array(len);
            for (let i = 0; i < len; i++) {
                const fixedElement = (0, beet_fixable_1.fixBeetFromData)(elements[i], buf, cursor);
                fixedElements[i] = fixedElement;
                cursor += fixedElement.byteSize;
            }
            return fixedSizeTuple(fixedElements);
        },
        toFixedFromValue(vals) {
            (0, assert_1.strict)(Array.isArray(vals), `${vals} should be an array of tuple values`);
            assert_1.strict.equal(vals.length, len, `There should be ${len} tuple values, but there are ${vals.length}`);
            const fixedElements = new Array(len);
            for (let i = 0; i < vals.length; i++) {
                const fixedElement = (0, beet_fixable_1.fixBeetFromValue)(elements[i], vals[i]);
                fixedElements[i] = fixedElement;
            }
            return fixedSizeTuple(fixedElements);
        },
        description: `Tuple<${elDescs.join(',')}>`,
    };
}
exports.tuple = tuple;
/**
 * Maps tuples beet exports to metadata which describes in which package it
 * is defined as well as which TypeScript type is used to represent the
 * deserialized value in JavaScript.
 *
 * @category TypeDefinition
 */
exports.tuplesTypeMap = {
    Tuple: {
        beet: 'tuple',
        isFixable: true,
        sourcePack: types_1.BEET_PACKAGE,
        ts: '[__tuple_elements__]',
    },
    FixedSizeTuple: {
        beet: 'fixedSizeTuple',
        isFixable: false,
        sourcePack: types_1.BEET_PACKAGE,
        ts: '[__tuple_elements__]',
    },
};
//# sourceMappingURL=tuples.js.map