/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
/**
 * @category Instructions
 * @category InsertOrAppend
 * @category generated
 */
export declare type InsertOrAppendInstructionArgs = {
    root: number[];
    leaf: number[];
    index: number;
};
/**
 * @category Instructions
 * @category InsertOrAppend
 * @category generated
 */
export declare const insertOrAppendStruct: beet.BeetArgsStruct<InsertOrAppendInstructionArgs & {
    instructionDiscriminator: number[];
}>;
/**
 * Accounts required by the _insertOrAppend_ instruction
 *
 * @property [_writable_] merkleTree
 * @property [**signer**] authority
 * @property [] noop
 * @category Instructions
 * @category InsertOrAppend
 * @category generated
 */
export declare type InsertOrAppendInstructionAccounts = {
    merkleTree: web3.PublicKey;
    authority: web3.PublicKey;
    noop: web3.PublicKey;
    anchorRemainingAccounts?: web3.AccountMeta[];
};
export declare const insertOrAppendInstructionDiscriminator: number[];
/**
 * Creates a _InsertOrAppend_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category InsertOrAppend
 * @category generated
 */
export declare function createInsertOrAppendInstruction(accounts: InsertOrAppendInstructionAccounts, args: InsertOrAppendInstructionArgs, programId?: web3.PublicKey): web3.TransactionInstruction;
//# sourceMappingURL=insertOrAppend.d.ts.map