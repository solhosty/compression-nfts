/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
/**
 * @category Instructions
 * @category VerifyLeaf
 * @category generated
 */
export declare type VerifyLeafInstructionArgs = {
    root: number[];
    leaf: number[];
    index: number;
};
/**
 * @category Instructions
 * @category VerifyLeaf
 * @category generated
 */
export declare const verifyLeafStruct: beet.BeetArgsStruct<VerifyLeafInstructionArgs & {
    instructionDiscriminator: number[];
}>;
/**
 * Accounts required by the _verifyLeaf_ instruction
 *
 * @property [] merkleTree
 * @category Instructions
 * @category VerifyLeaf
 * @category generated
 */
export declare type VerifyLeafInstructionAccounts = {
    merkleTree: web3.PublicKey;
    anchorRemainingAccounts?: web3.AccountMeta[];
};
export declare const verifyLeafInstructionDiscriminator: number[];
/**
 * Creates a _VerifyLeaf_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category VerifyLeaf
 * @category generated
 */
export declare function createVerifyLeafInstruction(accounts: VerifyLeafInstructionAccounts, args: VerifyLeafInstructionArgs, programId?: web3.PublicKey): web3.TransactionInstruction;
//# sourceMappingURL=verifyLeaf.d.ts.map