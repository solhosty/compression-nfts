/// <reference types="node" />
/// <reference types="bn.js" />
import type { PublicKey, Connection, Commitment, GetAccountInfoConfig } from '@solana/web3.js';
import { ConcurrentMerkleTreeHeader } from '../generated/types/ConcurrentMerkleTreeHeader';
import { Canopy, ConcurrentMerkleTree } from '../types';
/**
 * This class provides all the getter methods to deserialize
 * information associated with an on-chain ConcurrentMerkleTree
 */
export declare class ConcurrentMerkleTreeAccount {
    header: ConcurrentMerkleTreeHeader;
    tree: ConcurrentMerkleTree;
    canopy: Canopy;
    constructor(header: ConcurrentMerkleTreeHeader, tree: ConcurrentMerkleTree, canopy: Canopy);
    static fromBuffer(buffer: Buffer): ConcurrentMerkleTreeAccount;
    static fromAccountAddress(connection: Connection, publicKey: PublicKey, commitmentOrConfig?: Commitment | GetAccountInfoConfig): Promise<ConcurrentMerkleTreeAccount>;
    private getHeaderV1;
    /**
     * Returns the `maxBufferSize` for this tree, by reading the account's header
     * @returns
     */
    getMaxBufferSize(): number;
    /**
     * Returns the `maxDepth` of this tree, by reading the account's header
     * @returns
     */
    getMaxDepth(): number;
    /**
     * Returns `min(seq, maxBufferSize)`
     * @returns
     */
    getBufferSize(): number;
    /**
     * Returns the current root hash for this on-chain tree
     * @returns
     */
    getCurrentRoot(): Buffer;
    /**
     * Returns the index to the spot in the on-chain buffer that stores the current
     * root and last changelog.
     *
     * Should always be `this.getCurrentSeq() % this.getMaxBufferSize()`
     * @returns
     */
    getCurrentBufferIndex(): number;
    /**
     * Returns the PublicKey that can execute modifying operations
     * on this tree
     * @returns
     */
    getAuthority(): PublicKey;
    /**
     * Returns the slot that this tree was created in. Useful for indexing
     * transactions associated with this tree.
     * @returns
     */
    getCreationSlot(): import("bn.js");
    /**
     * Returns the number of modifying operations that have been performed
     * on this tree.
     * @returns
     */
    getCurrentSeq(): import("bn.js");
    /**
     * Returns the depth of the on-chain tree-cache. Increasing the canopy depth reduces the size of the proofs
     * that have to be passed for tree instructions.
     * @returns the size
     */
    getCanopyDepth(): number;
}
/**
 * Return expected depth of the cached {@link Canopy} tree just from the number
 * of bytes used to store the Canopy
 *
 * @param canopyByteLength
 * @returns
 */
export declare function getCanopyDepth(canopyByteLength: number): number;
/**
 * Calculate the expected size of an ConcurrentMerkleTreeAccount
 * @param maxDepth
 * @param maxBufferSize
 * @param canopyDepth
 * @param headerVersion
 * @returns
 */
export declare function getConcurrentMerkleTreeAccountSize(maxDepth: number, maxBufferSize: number, canopyDepth?: number, headerVersion?: string): number;
//# sourceMappingURL=ConcurrentMerkleTreeAccount.d.ts.map