"use strict";
/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.errorFromName = exports.errorFromCode = exports.LeafIndexOutOfBoundsError = exports.IncorrectAccountTypeError = exports.IncorrectAccountOwnerError = exports.IncorrectAuthorityError = exports.CanopyLengthMismatchError = exports.ConcurrentMerkleTreeConstantsErrorError = exports.ZeroCopyErrorError = exports.ConcurrentMerkleTreeErrorError = exports.IncorrectLeafLengthError = void 0;
const createErrorFromCodeLookup = new Map();
const createErrorFromNameLookup = new Map();
/**
 * IncorrectLeafLength: 'Incorrect leaf length. Expected vec of 32 bytes'
 *
 * @category Errors
 * @category generated
 */
class IncorrectLeafLengthError extends Error {
    constructor() {
        super('Incorrect leaf length. Expected vec of 32 bytes');
        this.code = 0x1770;
        this.name = 'IncorrectLeafLength';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, IncorrectLeafLengthError);
        }
    }
}
exports.IncorrectLeafLengthError = IncorrectLeafLengthError;
createErrorFromCodeLookup.set(0x1770, () => new IncorrectLeafLengthError());
createErrorFromNameLookup.set('IncorrectLeafLength', () => new IncorrectLeafLengthError());
/**
 * ConcurrentMerkleTreeError: 'Concurrent merkle tree error'
 *
 * @category Errors
 * @category generated
 */
class ConcurrentMerkleTreeErrorError extends Error {
    constructor() {
        super('Concurrent merkle tree error');
        this.code = 0x1771;
        this.name = 'ConcurrentMerkleTreeError';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, ConcurrentMerkleTreeErrorError);
        }
    }
}
exports.ConcurrentMerkleTreeErrorError = ConcurrentMerkleTreeErrorError;
createErrorFromCodeLookup.set(0x1771, () => new ConcurrentMerkleTreeErrorError());
createErrorFromNameLookup.set('ConcurrentMerkleTreeError', () => new ConcurrentMerkleTreeErrorError());
/**
 * ZeroCopyError: 'Issue zero copying concurrent merkle tree data'
 *
 * @category Errors
 * @category generated
 */
class ZeroCopyErrorError extends Error {
    constructor() {
        super('Issue zero copying concurrent merkle tree data');
        this.code = 0x1772;
        this.name = 'ZeroCopyError';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, ZeroCopyErrorError);
        }
    }
}
exports.ZeroCopyErrorError = ZeroCopyErrorError;
createErrorFromCodeLookup.set(0x1772, () => new ZeroCopyErrorError());
createErrorFromNameLookup.set('ZeroCopyError', () => new ZeroCopyErrorError());
/**
 * ConcurrentMerkleTreeConstantsError: 'An unsupported max depth or max buffer size constant was provided'
 *
 * @category Errors
 * @category generated
 */
class ConcurrentMerkleTreeConstantsErrorError extends Error {
    constructor() {
        super('An unsupported max depth or max buffer size constant was provided');
        this.code = 0x1773;
        this.name = 'ConcurrentMerkleTreeConstantsError';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, ConcurrentMerkleTreeConstantsErrorError);
        }
    }
}
exports.ConcurrentMerkleTreeConstantsErrorError = ConcurrentMerkleTreeConstantsErrorError;
createErrorFromCodeLookup.set(0x1773, () => new ConcurrentMerkleTreeConstantsErrorError());
createErrorFromNameLookup.set('ConcurrentMerkleTreeConstantsError', () => new ConcurrentMerkleTreeConstantsErrorError());
/**
 * CanopyLengthMismatch: 'Expected a different byte length for the merkle tree canopy'
 *
 * @category Errors
 * @category generated
 */
class CanopyLengthMismatchError extends Error {
    constructor() {
        super('Expected a different byte length for the merkle tree canopy');
        this.code = 0x1774;
        this.name = 'CanopyLengthMismatch';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, CanopyLengthMismatchError);
        }
    }
}
exports.CanopyLengthMismatchError = CanopyLengthMismatchError;
createErrorFromCodeLookup.set(0x1774, () => new CanopyLengthMismatchError());
createErrorFromNameLookup.set('CanopyLengthMismatch', () => new CanopyLengthMismatchError());
/**
 * IncorrectAuthority: 'Provided authority does not match expected tree authority'
 *
 * @category Errors
 * @category generated
 */
class IncorrectAuthorityError extends Error {
    constructor() {
        super('Provided authority does not match expected tree authority');
        this.code = 0x1775;
        this.name = 'IncorrectAuthority';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, IncorrectAuthorityError);
        }
    }
}
exports.IncorrectAuthorityError = IncorrectAuthorityError;
createErrorFromCodeLookup.set(0x1775, () => new IncorrectAuthorityError());
createErrorFromNameLookup.set('IncorrectAuthority', () => new IncorrectAuthorityError());
/**
 * IncorrectAccountOwner: 'Account is owned by a different program, expected it to be owned by this program'
 *
 * @category Errors
 * @category generated
 */
class IncorrectAccountOwnerError extends Error {
    constructor() {
        super('Account is owned by a different program, expected it to be owned by this program');
        this.code = 0x1776;
        this.name = 'IncorrectAccountOwner';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, IncorrectAccountOwnerError);
        }
    }
}
exports.IncorrectAccountOwnerError = IncorrectAccountOwnerError;
createErrorFromCodeLookup.set(0x1776, () => new IncorrectAccountOwnerError());
createErrorFromNameLookup.set('IncorrectAccountOwner', () => new IncorrectAccountOwnerError());
/**
 * IncorrectAccountType: 'Account provided has incorrect account type'
 *
 * @category Errors
 * @category generated
 */
class IncorrectAccountTypeError extends Error {
    constructor() {
        super('Account provided has incorrect account type');
        this.code = 0x1777;
        this.name = 'IncorrectAccountType';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, IncorrectAccountTypeError);
        }
    }
}
exports.IncorrectAccountTypeError = IncorrectAccountTypeError;
createErrorFromCodeLookup.set(0x1777, () => new IncorrectAccountTypeError());
createErrorFromNameLookup.set('IncorrectAccountType', () => new IncorrectAccountTypeError());
/**
 * LeafIndexOutOfBounds: 'Leaf index of concurrent merkle tree is out of bounds'
 *
 * @category Errors
 * @category generated
 */
class LeafIndexOutOfBoundsError extends Error {
    constructor() {
        super('Leaf index of concurrent merkle tree is out of bounds');
        this.code = 0x1778;
        this.name = 'LeafIndexOutOfBounds';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, LeafIndexOutOfBoundsError);
        }
    }
}
exports.LeafIndexOutOfBoundsError = LeafIndexOutOfBoundsError;
createErrorFromCodeLookup.set(0x1778, () => new LeafIndexOutOfBoundsError());
createErrorFromNameLookup.set('LeafIndexOutOfBounds', () => new LeafIndexOutOfBoundsError());
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
function errorFromCode(code) {
    const createError = createErrorFromCodeLookup.get(code);
    return createError != null ? createError() : null;
}
exports.errorFromCode = errorFromCode;
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
function errorFromName(name) {
    const createError = createErrorFromNameLookup.get(name);
    return createError != null ? createError() : null;
}
exports.errorFromName = errorFromName;
//# sourceMappingURL=index.js.map