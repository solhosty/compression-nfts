"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.concurrentMerkleTreeBeetFactory = void 0;
const beet = __importStar(require("@metaplex-foundation/beet"));
const beetSolana = __importStar(require("@metaplex-foundation/beet-solana"));
const Path_1 = require("./Path");
const changeLogBeetFactory = (maxDepth) => {
    return new beet.BeetArgsStruct([
        ['root', beetSolana.publicKey],
        ['pathNodes', beet.uniformFixedSizeArray(beetSolana.publicKey, maxDepth)],
        ['index', beet.u32],
        ['_padding', beet.u32],
    ], 'ChangeLog');
};
/**
 * Factory function for generating a `beet` that can deserialize
 * an on-chain {@link ConcurrentMerkleTree}
 *
 * @param maxDepth
 * @param maxBufferSize
 * @returns
 */
const concurrentMerkleTreeBeetFactory = (maxDepth, maxBufferSize) => {
    return new beet.BeetArgsStruct([
        ['sequenceNumber', beet.u64],
        ['activeIndex', beet.u64],
        ['bufferSize', beet.u64],
        [
            'changeLogs',
            beet.uniformFixedSizeArray(changeLogBeetFactory(maxDepth), maxBufferSize),
        ],
        ['rightMostPath', (0, Path_1.pathBeetFactory)(maxDepth)],
    ], 'ConcurrentMerkleTree');
};
exports.concurrentMerkleTreeBeetFactory = concurrentMerkleTreeBeetFactory;
//# sourceMappingURL=ConcurrentMerkleTree.js.map