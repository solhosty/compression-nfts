/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';

/**
 * @category Instructions
 * @category Append
 * @category generated
 */
export type AppendInstructionArgs = {
  leaf: number[] /* size: 32 */;
};
/**
 * @category Instructions
 * @category Append
 * @category generated
 */
export const appendStruct = new beet.BeetArgsStruct<
  AppendInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['leaf', beet.uniformFixedSizeArray(beet.u8, 32)],
  ],
  'AppendInstructionArgs'
);
/**
 * Accounts required by the _append_ instruction
 *
 * @property [_writable_] merkleTree
 * @property [**signer**] authority
 * @property [] noop
 * @category Instructions
 * @category Append
 * @category generated
 */
export type AppendInstructionAccounts = {
  merkleTree: web3.PublicKey;
  authority: web3.PublicKey;
  noop: web3.PublicKey;
  anchorRemainingAccounts?: web3.AccountMeta[];
};

export const appendInstructionDiscriminator = [
  149, 120, 18, 222, 236, 225, 88, 203,
];

/**
 * Creates a _Append_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category Append
 * @category generated
 */
export function createAppendInstruction(
  accounts: AppendInstructionAccounts,
  args: AppendInstructionArgs,
  programId = new web3.PublicKey('cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK')
) {
  const [data] = appendStruct.serialize({
    instructionDiscriminator: appendInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.merkleTree,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.noop,
      isWritable: false,
      isSigner: false,
    },
  ];

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc);
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
